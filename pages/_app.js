//import '../styles/globals.scss';
import 'nprogress/nprogress.css';
import { useState } from 'react';

import Head from 'next/head';
import Router from 'next/router';
import Nprogress from 'nprogress';
import NextApp from 'next/app';

import { getCookie, setCookie } from 'cookies-next';

import { Layout, RouterTransition } from '@/components';
import {
  ColorSchemeProvider,
  MantineProvider,
  TypographyStylesProvider,
} from '@mantine/core';
//import { useLocalStorage } from '@mantine/hooks';
import { useColorScheme } from '@mantine/hooks';

import { darkTheme, fonts, lightTheme } from '@/styles/globalStyles';

Router.events.on('routeChangeStart', () => Nprogress.start());
Router.events.on('routeChangeComplete', () => Nprogress.done());
Router.events.on('routeChangeError', () => Nprogress.done());

const MyApp = ({ Component, pageProps, cachedColorScheme }) => {
  const preferredColorScheme = useColorScheme();
  //const [colorScheme, setColorScheme] = useState(cachedColorScheme);
  /* let toggleColorScheme = (value) => {
    const newScheme = value || (colorScheme === 'dark' ? 'light' : 'dark');
    setColorScheme(newScheme);
    setCookie('color-scheme', newScheme, {
      maxAge: 60 * 60 * 24 * 30,
    });
  }; */

  const [colorScheme, setColorScheme] = useState(preferredColorScheme);
  const toggleColorScheme = (value) =>
    setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));
  //console.log('cachedColorScheme', cachedColorScheme);
  console.log('colorScheme', colorScheme);

  let isDark = colorScheme === 'dark';
  let themeConfig = isDark ? darkTheme : lightTheme;
  let font = fonts[5];
  return (
    <>
      <Head>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <title>Every Thought Captive</title>
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <ColorSchemeProvider
        colorScheme={colorScheme}
        toggleColorScheme={toggleColorScheme}
      >
        <MantineProvider
          withGlobalStyles
          withNormalizeCSS
          withCSSVariables
          theme={themeConfig}
        >
          <RouterTransition />
          <TypographyStylesProvider>
            <Layout theme={themeConfig}>
              {/*  <ErrorBoundary> */}
              <Component {...pageProps} />
              {/* </ErrorBoundary> */}
              {/* <Component {...pageProps} /> */}
            </Layout>
          </TypographyStylesProvider>
        </MantineProvider>
      </ColorSchemeProvider>
    </>
  );
};

MyApp.getInitialProps = async (appCtx) => {
  const ctx = await NextApp.getInitialProps(appCtx);
  return {
    ...ctx,
    cachedColorScheme: getCookie('color-scheme', appCtx.ctx) || 'light',
  };
};

export default MyApp;
