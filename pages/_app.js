//import '../styles/globals.scss';
import 'nprogress/nprogress.css';

import Head from 'next/head';
import Router, { useRouter } from 'next/router';
import Nprogress from 'nprogress';

import {
  Layout,
  RouterTransition,
} from '@/components';
import { TypographyStylesProvider } from '@mantine/core';
import { useLocalStorage } from '@mantine/hooks';
import {
  ColorSchemeProvider,
  MantineProvider,
} from '@mantine/styles';

import {
  darkTheme,
  fonts,
  lightTheme,
} from '../styles/globalStyles';

Router.events.on("routeChangeStart", () => Nprogress.start());
Router.events.on("routeChangeComplete", () => Nprogress.done());
Router.events.on("routeChangeError", () => Nprogress.done());

const MyApp = ({ Component, pageProps }) => {
  let [colorScheme, setColorScheme] = useLocalStorage({
    key: "color-scheme",
    defaultValue: "light",
  });
  let isDark = colorScheme === "dark";
  let toggleColorScheme = (value) =>
    setColorScheme(value || (isDark ? "light" : "dark"));
  let themeConfig = isDark ? darkTheme : lightTheme;
  let router = useRouter();
  let font = fonts[5];
  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>Nolan Corcoran - Always Good</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ColorSchemeProvider
        colorScheme={colorScheme}
        toggleColorScheme={toggleColorScheme}>
        <MantineProvider
          withGlobalStyles
          withNormalizeCSS
          withCSSVariables
          theme={{
            /** Put your mantine theme override here */
            colorScheme: themeConfig.colorScheme,
            defaultRadius: "10px",
            colors: {
              // Add your color
              background: [themeConfig.background],
              surface: [themeConfig.surface],
              disabled: [themeConfig.disabled],
              hint: [themeConfig.hint],
              primary: themeConfig.primary,
              secondary: themeConfig.secondary,
              brown: themeConfig.brown,
              deepBlue: ["#E9EDFC", "#C1CCF6", "#99ABF0" /* ... */],
              //blue: ["#E9EDFC", "#C1CCF6", "#99ABF0" /* ... */],
            },
            primaryColor: "primary",
            defaultGradient: {
              deg: 0,
              from: themeConfig.primary[themeConfig.shade - 2],
              to: themeConfig.primary[themeConfig.shade + 1],
            },
            primaryShade: themeConfig.shade,
            fontFamily: font,
            shadows: {
              md: "1px 1px 3px rgba(0, 0, 0, .25)",
              xl: "5px 5px 3px rgba(0, 0, 0, .25)",
            },

            headings: {
              fontFamily: font,
              sizes: {
                h1: { fontSize: "3.5rem", fontWeight: 400 },
                h2: { fontSize: "2.75rem", fontWeight: 400 },
                h3: { fontSize: "2rem", fontWeight: 400 },
                h4: { fontSize: "1.5rem", fontWeight: 400 },
                h5: { fontSize: "1.2rem", fontWeight: 400 },
                h6: { fontSize: "0.75rem", fontWeight: 400 },
              },
            },

            other: {
              background: themeConfig.background,
              surface: themeConfig.surface,
              primary: themeConfig.primary[themeConfig.shade],
              secondary: themeConfig.secondary[themeConfig.shade],
              text: themeConfig.text,
              warning: themeConfig.warning,
              info: themeConfig.info,
              success: themeConfig.success,
              divider: themeConfig.divider,
              fonts: fonts,
            },
          }}>
          <RouterTransition />
          <TypographyStylesProvider>
            <Layout>
             {/*  <ErrorBoundary> */}
                <Component {...pageProps} />
              {/* </ErrorBoundary> */}
              {/* <Component {...pageProps} /> */}
            </Layout>
          </TypographyStylesProvider>
        </MantineProvider>
      </ColorSchemeProvider>
    </>
  );
};

export default MyApp;
